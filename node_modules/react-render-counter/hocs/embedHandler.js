'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEmbeddedName = exports.createEmbeddedHandler = exports.createEmbeddedFunction = undefined;

var _withHandlers2 = require('recompose/withHandlers');

var _withHandlers3 = _interopRequireDefault(_withHandlers2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var createEmbeddedFunction = exports.createEmbeddedFunction = function createEmbeddedFunction(innerFunc, outerFunc) {
  return function () {
    for (var _len = arguments.length, innerArgs = Array(_len), _key = 0; _key < _len; _key++) {
      innerArgs[_key] = arguments[_key];
    }

    var deducedMaxLength = Math.max(innerFunc.length, innerArgs.length);
    if (outerFunc.length <= deducedMaxLength) {
      innerFunc.apply(undefined, innerArgs);
      return outerFunc.apply(undefined, innerArgs);
    }
    var next = function next() {
      return innerFunc.apply(undefined, innerArgs);
    };
    var outerArgs = [].concat(innerArgs);
    outerArgs.length = deducedMaxLength;
    return outerFunc.apply(undefined, _toConsumableArray(outerArgs).concat([next]));
  };
};

var createEmbeddedHandler = exports.createEmbeddedHandler = function createEmbeddedHandler(innerName, outerName) {
  return function (props) {
    var innerHandler = void 0;
    if (typeof innerName === 'function') {
      innerHandler = innerName(props);
    } else if (typeof innerName === 'string') {
      innerHandler = props[innerName];
    }
    if (typeof innerHandler !== 'function') {
      throw new Error('innerName must be a handler or the name of it');
    }

    var outerHandler = props[outerName];

    if (!outerHandler) return innerHandler;

    return createEmbeddedFunction(innerHandler, outerHandler, props);
  };
};

var createEmbeddedName = exports.createEmbeddedName = function createEmbeddedName(innerName, outerName) {
  return typeof innerName === 'string' ? innerName : outerName;
};

exports.default = function (innerName, outerName) {
  var name = createEmbeddedName(innerName, outerName);
  var handler = createEmbeddedHandler(innerName, outerName);

  return (0, _withHandlers3.default)(_defineProperty({}, name, handler));
};