'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _embedHandler = require('../hocs/embedHandler');

var _Counter = require('./Counter');

var _Counter2 = _interopRequireDefault(_Counter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Example From http://airbnb.io/enzyme/docs/api/ShallowWrapper/update.html
var RenderCounter = function (_React$Component) {
  _inherits(RenderCounter, _React$Component);

  function RenderCounter(props) {
    _classCallCheck(this, RenderCounter);

    var _this = _possibleConstructorReturn(this, (RenderCounter.__proto__ || Object.getPrototypeOf(RenderCounter)).call(this, props));

    _this.count = props.initialCount;
    _this.onRerender = _this.onRerender.bind(_this);
    return _this;
  }

  _createClass(RenderCounter, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var newCount = this.count + 1;
      if (props.onRerender) {
        (0, _embedHandler.createEmbeddedFunction)(this.onRerender, props.onRerender)(newCount);
      } else {
        this.onRerender(newCount);
      }
    }
  }, {
    key: 'onRerender',
    value: function onRerender(count) {
      this.count = count;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Counter2.default, { count: this.count });
    }
  }]);

  return RenderCounter;
}(_react2.default.Component);

RenderCounter.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Initial count for RenderCounter.
   */
  initialCount: _propTypes2.default.number,
  /**
   * (count[, next]) => {...}
   * if next is specified, inner onRerender will not be called until next is called
   */
  onRerender: _propTypes2.default.func
} : {};

RenderCounter.defaultProps = {
  initialCount: 1,
  onRerender: undefined
};

exports.default = RenderCounter;